server:
  port: 8080
  servlet:
    context-path: /api/v1

spring:
  application:
    name: flight-booking-system
  
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:flightdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
  
  # H2 Console (for development)
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # RabbitMQ Configuration
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging
logging:
  level:
    org.example: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Custom application properties
app:
  redis:
    lock-ttl: 600000 # 10 minutes in milliseconds
    seat-lock-prefix: "seat:lock:"
  
  payment:
    gateway-url: http://localhost:8081/payment
    timeout: 30000 # 30 seconds
    retry-attempts: 3
  
  queue:
    seat-creation-queue: seat.creation.queue
    booking-queue: booking.queue
